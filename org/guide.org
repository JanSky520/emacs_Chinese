#+title:  org快速指南
#+author: JanSky
#+date:   2024-07-27


* 简介
Org 是一种使用快速有效的纯文本系统记笔记、维护待办事项列表和进行项目规划的模式。
它也是一个创作和发布系统，支持使用源代码进行文字编程和可重复的研究。
本文档是 Org 手册的精简版。它包含所有基本功能和命令，以及自定义的重要提示。
它适用于那些因为篇幅过大而不愿阅读 200 页手册的初学者。

** 安装
重要提示：如果您使用的 Org 版本是 Emacs 发行版的一部分，请跳过此部分并直接转到激活。
将从网上下载的 org 模块添加到 Emacs 配置中以激活
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/path/to/orgdir/lisp")
#+end_src

** 激活
将以下几行添加到您的 Emacs 初始化文件中，为三个命令定义全局键，这些键在任何 Emacs 缓冲区（而不仅仅是 Org 缓冲区）中都很有用。
可根据自身习惯自行选择合适的键。
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c l") #'org-store-link)
  (global-set-key (kbd "C-c a") #'org-agenda)
  (global-set-key (kbd "C-c c") #'org-capture)
#+end_src

** 反馈
如果您发现 Org 存在问题，或者您有疑问、评论或想法，请发送邮件至 Org 邮件列表 mailto:emacs-orgmode@gnu.org。
有关如何提交错误报告的信息，请参阅主手册。


* 文档结构
Org 是一个大纲工具。大纲允许将文档组织成层次结构，对我来说，这是笔记和想法的最佳表示。
通过折叠可以概览此结构，即隐藏文档的大部分内容以仅显示一般文档结构和当前正在处理的部分。
Org 通过将整个显示和隐藏功能压缩为与 TAB 键 org-cycle 绑定的单个命令，大大简化了整体的使用。

** 标题
标题定义了大纲树的结构。Org 中的标题从左边距1开始，以一个或多个星号开头，后跟一个空格。例如：
#+begin_src org
  * 顶级标题
  ** 第二级
  *** 第三级
      一些文本
  *** 第三级
      更多文本
  * 另一个顶级标题
#+end_src
请注意，命名的标题 org-footnote-section 默认为 '脚注'，被视为特殊。具有此标题的子树将被导出函数默认忽略。
有些人觉得很多星星太嘈杂，他们更喜欢轮廓上有空白，后面跟着一颗星星作为标题开头。请参阅杂项，了解实现此目的的设置。

** 可见的循环
TAB 功能使得在缓冲区中隐藏文本的部分成为可能。
Org 模式使用两个命令，分别绑定到 TAB 和 S-TAB（org-cycle 和 org-shifttab），以改变缓冲区中的可见性。

+ TAB (org-cycle)
  子树循环：在当前子树的状态之间轮换。

+ S-TAB (org-global-cycle)
  C-u TAB (org-cycle)
  全局循环：在整个缓冲区的状态之间轮换

当 Emacs 首次访问 Org 文件时，全局状态设置为概览，即仅可见顶级标题。
可以通过变量 org-startup-folded 进行配置，或者通过在文件中添加 STARTUP 关键字来进行文件级别的配置。
关键字可以是 overview、content、showall、showeverything 或 show<n>levels（n = 2..5），例如：
#+begin_src org
  #+STARTUP: content
#+end_src

** 移动
以下命令用于跳转到缓冲区中的其他标题。

+ C-c C-n (org-next-visible-heading) \\
  跳转到下一个标题。
  
+ C-c C-p (org-previous-visible-heading) \\
  跳转到上一个标题。
  
+ C-c C-f (org-backward-heading-same-level) \\
  跳转到下一个同级标题。
  
+ C-c C-b (outline-backward-same-level) \\
  跳转到上一个同级标题。
  
+ C-c C-u (outline-up-heading) \\
  向上跳转到更高层级的标题。

** 结构编辑
+ M-RET (org-meta-return) \\
  插入与当前级别相同的新标题。如果光标在普通列表项中，则创建一个新项（参见普通列表）。
  当在行中间使用此命令时，当前行会被拆分，剩余部分成为新的标题。
  
+ M-S-RET (org-insert-todo-heading) \\
  在当前标题级别插入新的 TODO 项目。
  
+ TAB (org-cycle) \\
  在新的空条目中，TAB 循环切换合理的级别。
  
+ M-LEFT (org-metaleft) M-RIGHT (org-metaright) \\
  将当前标题提升或降低一级。
  
+ M-UP (org-move-subtree-up) M-DOWN (org-move-subtree-down) \\
  将子树上移或下移，即与同级的前一个或下一个子树交换位置。
  
+ C-c C-w (org-refile) \\
  将条目或区域重新归档到不同的位置。参见“重新归档和复制”。
  
+ C-x n s (org-narrow-to-subtree) C-x n w (widen) \\
  将缓冲区限制到当前子树，然后再扩大它。

当有一个活动区域（瞬态标记模式）时，提升和降级操作将作用于该区域内的所有标题。

** 稀疏树
Org mode 的一个重要功能是能够为大纲树中的选定信息构建稀疏树，使整个文档尽可能地折叠。
同时将选定的信息及其上方的标题结构显示出来。只需尝试一下，你就会立即明白它是如何工作的。

Org mode 包含几个创建这种树的命令，所有这些命令可以通过调度器访问：

+ C-c / (org-sparse-tree) \\
  这将提示你输入一个额外的键来选择一个创建稀疏树的命令。

+ C-c / r (org-occur) \\
  Occur。提示输入一个正则表达式，并显示一个包含所有匹配项的稀疏树。每个匹配项也会被高亮显示；按下 C-c C-c 可以取消高亮显示。

其他稀疏树命令根据 TODO 关键字、标签或属性来选择标题，这些将在本手册的后续部分讨论。

** 普通列表
在大纲树的条目中，手工格式化的列表可以提供额外的结构。它们还提供了一种创建复选框列表的方式（参见复选框）。
Org 支持编辑这些列表，并且每个导出器（参见导出）都可以解析和格式化它们。
Org 支持有序列表、无序列表和描述列表。
无序列表项以‘-’，‘+’，或‘*’作为项目符号开始。
有序列表项以‘1.’ 或 ‘1)’ 开始。
描述列表使用‘::’来分隔术语和描述。

属于同一列表的项目必须在第一行具有相同的缩进。一个项目在下一个与其项目符号/编号对齐的行或更少的缩进之前结束。
一个列表在所有项目都闭合后结束，或在两个空行之前结束。示例如下：
#+begin_src org
  * 《魔戒》
    我最喜欢的场景是（按以下顺序）
    1. Rohirrim 的攻击
    2. Eowyn 与巫王的战斗
       + 这已经是我在书中的最喜欢的场景
       + 我非常喜欢 Miranda Otto。
    这部电影中的重要演员有：
    - Elijah Wood :: 他饰演弗罗多
    - Sean Astin :: 他饰演山姆，弗罗多的朋友。
#+end_src
当光标位于项目的第一行（带有项目符号或编号的行）时，以下命令会对项目执行操作

+ TAB (org-cycle) \\
  项目可以像标题级别一样折叠。

+ M-RET (org-insert-heading) \\
  在当前级别插入新项目。使用前缀参数时，强制插入新标题（请参见结构编辑）。

+ M-S-RET (org-insert-todo-heading) \\
  插入一个带有复选框的新项目（请参见复选框）。

+ M-UP (org-move-item-up) M-DOWN (org-move-item-down) \\
  将当前项目（包括子项目）上移/下移（与相同缩进的前一个/下一个项目交换）。如果列表是有序的，自动重新编号。

+ M-LEFT (org-do-promote) M-RIGHT (org-do-demote) \\
  减少/增加项目的缩进，不影响子项目。

+ M-S-LEFT (org-promote-subtree) M-S-RIGHT (org-demote-subtree) \\
  减少/增加当前项目及其子项目的缩进。

+ C-c C-c (org-toggle-checkbox) \\
  如果项目行中有复选框（参见复选框），切换复选框的状态。同时验证整个列表中的项目符号和缩进一致性。

+ C-c - (org-cycle-list-bullet) \\
  在整个列表级别之间循环不同的项目符号（‘-’，‘+’，‘*’，‘1.’，‘1)’）。


* 表格
Org 配备了一个快速直观的表格编辑器。与 Emacs Calc 包（参见 GNU Emacs 计算器手册）结合使用时，支持类似电子表格的计算功能。
Org 使得以纯 ASCII 格式化表格变得简单。任何以 ‘|’ 作为第一个非空白字符的行都被视为表格的一部分。
‘|’ 也用作列分隔符。一个表格可能看起来像这样：
#+begin_src org
  | Name  | Phone | Age |
  | Peter |  1234 |  17 |
  | Anna  |  4321 |  25 |
#+end_src
每次在表格内按 TAB、RET 或 C-c C-c 时，表格会自动重新对齐。
TAB 还会移动到下一个字段（RET 移动到下一行），并在表格末尾或水平线之前创建新的表格行。
表格的缩进由第一行设置。任何以 ‘|-’ 开头的行都被视为水平分隔线，并将在下次对齐时扩展以覆盖整个表格宽度。
因此，要创建上述表格，你只需输入
#+begin_src org
  | Name  | Phone | Age |
  |-
#+end_src
然后按 TAB 来对齐表格并开始填写字段。更快的方法是输入 ‘|Name|Phone|Age’，然后按 C-c RET。
在字段中输入文本时，Org 以特殊方式处理 DEL、Backspace 和所有字符键，以避免插入和删除操作导致其他字段发生位移。
此外，当在使用 TAB、S-TAB 或 RET 将光标移动到新字段后立即开始输入时，该字段会自动变为空白。

+ 创建和转换
   * C-c | (org-table-create-or-convert-from-region)
     将活动区域转换为表格。如果每行都包含至少一个 TAB 字符，函数会假定这些内容是以 TAB 分隔的。
     如果每行都包含逗号，则假定为逗号分隔值（CSV）。如果都不符合，行则会在空白处拆分为字段。
     如果没有活动区域，此命令将创建一个空的 Org 表格。
     但更简单的方法是直接开始输入，比如输入 | Name | Phone | Age RET | - TAB。
+ 重新对齐和字段移动
   * C-c C-c (org-table-align): 重新对齐表格，但不移动光标。
   * TAB (org-table-next-field): 重新对齐表格，并移动到下一个字段（单元格）。如果在行末，会创建一个新行（如果需要）。
   * S-TAB (org-table-previous-field): 重新对齐表格，并移动到上一个字段。
   * RET (org-table-next-row): 重新对齐表格，并移动到下一行。如果需要，会创建一个新行。
   * S-UP (org-table-move-cell-up): 将当前单元格向上移动，通过与上方的单元格交换位置。
   * S-DOWN (org-table-move-cell-down): 将当前单元格向下移动，通过与下方的单元格交换位置。
   * S-LEFT (org-table-move-cell-left): 将当前单元格向左移动，通过与左侧的单元格交换位置。
   * S-RIGHT (org-table-move-cell-right): 将当前单元格向右移动，通过与右侧的单元格交换位置。
+ 列和行编辑
  * M-LEFT (org-table-move-column-left): 将当前列向左移动。
  * M-RIGHT (org-table-move-column-right): 将当前列向右移动。
  * M-S-LEFT (org-table-delete-column): 删除当前列。
  * M-S-RIGHT (org-table-insert-column): 在光标位置左侧插入一个新列。
  * M-UP (org-table-move-row-up): 将当前行向上移动。
  * M-DOWN (org-table-move-row-down): 将当前行向下移动。
  * M-S-UP (org-table-kill-row): 删除当前行或水平线。
  * M-S-DOWN (org-table-insert-row): 在当前行上方插入一行。带有前缀参数时，将在当前行下方创建一行。
  * C-c - (org-table-insert-hline): 在当前行下方插入一条水平线。带有前缀参数时，将在当前行上方插入一条水平线。
  * C-c RET (org-table-hline-and-move): 在当前行下方插入一条水平线，并将光标移动到该行下方的行中。
  * C-c ^ (org-table-sort-lines): 对表格中的行进行排序。
    
在指定区域内对表格行进行排序。光标位置指示用于排序的列，排序的范围是最接近的水平分隔线之间的行，或者是整个表格。


* 超链接
类似于 HTML，Org 也支持在文件内部、外部文件、Usenet 文章、电子邮件等地方使用链接。
Org 可以识别普通的 URI，通常用尖括号括起来，并将其激活为可点击的链接。不过，一般的链接格式如下：
#+begin_src org
  [[LINK][DESCRIPTION]]
#+end_src
或者：
#+begin_src org
  [[LINK]]
#+end_src
当缓冲区中的链接完整时，Org 会将显示方式更改为：'DESCRIPTION' 代替 '[[LINK][DESCRIPTION]]'，以及 'LINK' 代替 '[[LINK]]'。
要编辑不可见的 LINK 部分，可以将光标放在链接上并使用 C-c C-l。

+ 内部链接
  如果链接看起来不像一个 URL，那么它被视为在当前文件中的内部链接。
  最重要的情况是像‘[[#my-custom-id]]’这样的链接，它链接到具有‘CUSTOM_ID’属性‘my-custom-id’的条目。
  像‘[[My Target]]’或‘[[My Target][Find my target]]’这样的链接会在当前文件中进行文本搜索，寻找与‘<<My Target>>’对应的目标。

+ 外部链接
  Org 支持链接到文件、网站、Usenet 和电子邮件消息，BBDB 数据库条目，以及 IRC 对话和它们的日志。
  外部链接是类似 URL 的定位符。它们以一个简短的标识字符串开始，后跟一个冒号。冒号后面不能有空格。以下是一些示例：
  * http://www.astro.uva.nl/=dominik 网络链接
  * file:/home/Downloads/emacs.png 文件，绝对路径
  * /home/dominik/images/jupiter.jpg 同上
  * file:papers/last.pdf 文件，相对路径
  * ./papers/last.pdf 同上
  * file:projects.org 另一个 Org 文件
  * docview:papers/last.pdf::NNN 在 DocView 模式下打开页面 NNN
  * id:B7423F4D-2E8A-471B-8810-C40F074717E9 通过 ID 链接到标题
  * news:comp.emacs Usenet 链接
  * mailto:adent@galaxy.net 邮件链接
  * mhe:folder#id MH-E 消息链接
  * rmail:folder#id Rmail 消息链接
  * gnus:group#id Gnus 文章链接
  * bbdb:R.*Stallman BBDB 链接（使用正则表达式）
  * irc:/irc.com/#emacs/bob IRC 链接
  * info:org#Hyperlinks Info 节点链接
    
  文件链接可以包含额外的信息，使得 Emacs 在跟随链接时跳转到文件中的特定位置。
  这些信息可以是行号或在双冒号后面的搜索选项。以下是一些示例及其解释：

  * file:~/code/main.c::255：跳转到第 255 行
  * file:~/xx.org::My Target：跳转到 <<My Target>> 标记
[[  * file:~/xx.org::#my-custom-id]]：跳转到带有自定义 ID 的条目

+ 处理链接
  Org 提供了多种方法来创建链接、将其插入到 Org 文件中，以及跟随链接。
  主要功能是 org-store-link，可以通过 M-x org-store-link 调用。
  由于其重要性，我们建议将其绑定到一个广泛使用的快捷键（参见激活）。
  该功能会存储当前位置的链接，以便稍后插入到 Org 缓冲区中（见下文）。
  在 Org 缓冲区中，以下命令用于创建、导航或更一般地操作链接：
  * C-c C-l (org-insert-link)：插入一个链接。该命令会提示输入要插入的链接。你可以直接输入一个链接，也可以使用历史记录键 UP 和 DOWN 访问已存储的链接。系统会提示你输入链接的描述部分。
  * 当以 C-u 前缀参数调用时，将使用文件名补全功能来链接到文件。
  * C-c C-l（当光标位于现有链接上） (org-insert-link)：当光标位于现有链接上时，C-c C-l 允许你编辑链接和描述部分。
  * C-c C-o (open-link-at-point)：打开光标所在位置的链接。
  * C-c & (org-mark-ring-goto)：跳转回记录的位置。位置由内部链接的命令记录，并由 C-c % 记录。多次连续使用该命令可以在之前记录的位置环中循环移动。


* TODO 项目
Org 模式并不要求 TODO 列表必须存在于单独的文档中。
相反，TODO 项目可以作为笔记文件的一部分，因为 TODO 项目通常是在记录笔记时产生的！
在 Org 模式中，只需将树形结构中的任何条目标记为 TODO 项目即可。这样，信息不会重复，TODO 项目也保留在其产生的上下文中。
Org 模式提供了多种方法来概览你需要完成的所有事项，这些事项可以从多个文件中收集。



